{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\Hit\\\\frontend\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { connectWebSocket, sendMessage } from '../services/websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  const [gameState, setGameState] = useState(null);\n  useEffect(() => {\n    connectWebSocket('ws://localhost:3000');\n\n    // Join the game\n    sendMessage({\n      type: 'join',\n      playerId: 'player1'\n    });\n\n    // Listen for game state updates\n    const handleMessage = event => {\n      try {\n        const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\n        console.log('Received data:', data); // Debugging line\n\n        if (data.type === 'gameState') {\n          console.log('Setting game state:', data.data); // Debugging line\n          setGameState(data.data);\n        }\n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    };\n    window.addEventListener('message', handleMessage);\n    return () => {\n      window.removeEventListener('message', handleMessage);\n    };\n  }, []);\n\n  // Render the game board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: gameState && gameState.board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\",\n        children: cell ? cell.type : ''\n      }, cellIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"oBlRs/Y9H9l2tlMNEmPjMmn94yU=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","connectWebSocket","sendMessage","jsxDEV","_jsxDEV","Board","_s","gameState","setGameState","type","playerId","handleMessage","event","data","JSON","parse","console","log","error","window","addEventListener","removeEventListener","className","children","board","map","row","rowIndex","cell","cellIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/project/Hit/frontend/src/components/Board.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connectWebSocket, sendMessage } from '../services/websocket';\r\n\r\nfunction Board() {\r\n  const [gameState, setGameState] = useState(null);\r\n\r\n  useEffect(() => {\r\n    connectWebSocket('ws://localhost:3000');\r\n\r\n    // Join the game\r\n    sendMessage({ type: 'join', playerId: 'player1' });\r\n\r\n    // Listen for game state updates\r\n    const handleMessage = (event) => {\r\n      try {\r\n        const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\r\n        console.log('Received data:', data); // Debugging line\r\n        \r\n        if (data.type === 'gameState') {\r\n          console.log('Setting game state:', data.data); // Debugging line\r\n          setGameState(data.data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing message:', error);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('message', handleMessage);\r\n\r\n    return () => {\r\n      window.removeEventListener('message', handleMessage);\r\n    };\r\n  }, []);\r\n\r\n  // Render the game board\r\n  return (\r\n    <div className=\"board\">\r\n      {gameState && gameState.board.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"row\">\r\n          {row.map((cell, cellIndex) => (\r\n            <div key={cellIndex} className=\"cell\">\r\n              {cell ? cell.type : ''}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,gBAAgB,EAAEC,WAAW,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACdE,gBAAgB,CAAC,qBAAqB,CAAC;;IAEvC;IACAC,WAAW,CAAC;MAAEO,IAAI,EAAE,MAAM;MAAEC,QAAQ,EAAE;IAAU,CAAC,CAAC;;IAElD;IACA,MAAMC,aAAa,GAAIC,KAAK,IAAK;MAC/B,IAAI;QACF,MAAMC,IAAI,GAAG,OAAOD,KAAK,CAACC,IAAI,KAAK,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC,GAAGD,KAAK,CAACC,IAAI;QACjFG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,IAAI,CAAC,CAAC,CAAC;;QAErC,IAAIA,IAAI,CAACJ,IAAI,KAAK,WAAW,EAAE;UAC7BO,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEJ,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC;UAC/CL,YAAY,CAACK,IAAI,CAACA,IAAI,CAAC;QACzB;MACF,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAET,aAAa,CAAC;IAEjD,OAAO,MAAM;MACXQ,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEV,aAAa,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACEP,OAAA;IAAKkB,SAAS,EAAC,OAAO;IAAAC,QAAA,EACnBhB,SAAS,IAAIA,SAAS,CAACiB,KAAK,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,kBAC9CvB,OAAA;MAAoBkB,SAAS,EAAC,KAAK;MAAAC,QAAA,EAChCG,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,SAAS,kBACvBzB,OAAA;QAAqBkB,SAAS,EAAC,MAAM;QAAAC,QAAA,EAClCK,IAAI,GAAGA,IAAI,CAACnB,IAAI,GAAG;MAAE,GADdoB,SAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEd,CACN;IAAC,GALMN,QAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMb,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC3B,EAAA,CA7CQD,KAAK;AAAA6B,EAAA,GAAL7B,KAAK;AA+Cd,eAAeA,KAAK;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}